@page "/login"
@layout AuthLayout
@inject CustomStateProvider authStateProvider
@inject NavigationManager navigationManager


<div class="col-lg-5">
    <div class="card shadow-lg border-0 rounded-lg mt-5">
        <div class="card-header"><h3 class="text-center font-weight-light">Login</h3></div>
        <div class="card-body">
            <EditForm class="form-signin form-horizontal" OnValidSubmit="OnSubmit" Model="loginRequest">
                <DataAnnotationsValidator />
                <label class="text-danger">@error</label>
                <div class="form-group">
                    <label class="small mb-1" for="inputUsername">Username</label>
                    <InputText id="inputUsername" class="form-control" @bind-Value="loginRequest.UserName" autofocus placeholder="Username" />

                    <ValidationMessage For="@(() => loginRequest.UserName)" />
                </div>
                <div class="form-group">
                    <label class="small mb-1" for="inputPassword">Password</label>
                    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="loginRequest.Password" />

                    <ValidationMessage For="@(() => loginRequest.Password)" />
                </div>
                <div class="form-group">
                    <div class="custom-control custom-checkbox">
                        <InputCheckbox id="inputRememberMe" class="minheight0 checkbox form-check-input" @bind-Value="@loginRequest.RememberMe" /> Remember password
                    </div>
                </div>
                <div class="form-group d-flex align-items-center justify-content-between mt-4 mb-0">
                    <button class="btn btn-primary" type="submit">Login</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Login model
    /// </summary>
    LoginRequest loginRequest { get; set; } = new LoginRequest();
    string error { get; set; }

    /// <summary>
    /// Login method, takes username and password and validates login
    /// </summary>
    /// <returns></returns>
    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Login(loginRequest);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}

