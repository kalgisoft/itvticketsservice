@page "/login"
@layout AuthLayout
@inject NavigationManager navigationManager


<div class="col-lg-5">
    <div class="card shadow-lg border-0 rounded-lg mt-5">
        <div class="card-header"><h3 class="text-center font-weight-light">Login</h3></div>
        <div class="card-body">
            <EditForm class="form-signin form-horizontal" OnValidSubmit="ExecuteLogin" Model="_userForAuthentication">
                <DataAnnotationsValidator />
                <label class="text-danger">@Error</label>
                <div class="form-group">
                    <label class="small mb-1" for="inputUsername">Username</label>
                    <InputText id="inputUsername" class="form-control" @bind-Value="_userForAuthentication.UserName" autofocus placeholder="Username" />

                    <ValidationMessage For="@(() => _userForAuthentication.UserName)" />
                </div>
                <div class="form-group">
                    <label class="small mb-1" for="inputPassword">Password</label>
                    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="_userForAuthentication.Password" />

                    <ValidationMessage For="@(() => _userForAuthentication.Password)" />
                </div>
                <div class="form-group">
                    <div class="custom-control custom-checkbox">
                        <InputCheckbox id="inputRememberMe" class="minheight0 checkbox form-check-input" @bind-Value="@_userForAuthentication.RememberMe" /> Remember password
                    </div>
                </div>
                <div class="form-group d-flex align-items-center justify-content-between mt-4 mb-0">
                    <button class="btn btn-primary" type="submit">Login</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private UserForAuthenticationDto _userForAuthentication = new UserForAuthenticationDto();
    [Inject]
    public IAuthService AuthService { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    public bool ShowAuthError { get; set; }
    public string Error { get; set; }
    public async Task ExecuteLogin()
    {
        ShowAuthError = false;
        var result = await AuthService.Login(_userForAuthentication);
        if (!result.IsAuthSuccessful)
        {
            Error = result.ErrorMessage;
            ShowAuthError = true;
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }
}

