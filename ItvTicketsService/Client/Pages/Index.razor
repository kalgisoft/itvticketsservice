@page "/"
@inject IUserInfoService _userinfoService
@inject ITicketService _ticketService
@inject ICompanyService _companyService
@inject IPlantService _plantService
@inject IDeviceService _deviceService
@inject IDialogService _dialogService

<!-- Client -->
<AuthorizeView Roles="Client">
    <Authorized Context="TicketsForClient">
        <div class="container-fluid container-height">
            <br />
            <div class="row">

                @if (plants != null)
                {
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                                <thead>
                                    <tr>
                                        <th>Plant</th>
                                        <th>Company</th>
                                        <th>ticket amount</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var plnt in plants)
                                    {
                                        <tr>
                                            <td>@plnt.Name</td>
                                            <td>
                                                @if (dictCompanyName.ContainsKey(plnt.IdCompany))
                                                    @dictCompanyName[plnt.IdCompany]
                                            </td>
                                            <td>
                                                @if (dictCompanyTickets.ContainsKey(plnt.IdCompany))
                                                    @dictCompanyTickets[plnt.IdCompany]
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }

                <AddTicketComponentClient OnRefreshParent="AddTicketRefresh"></AddTicketComponentClient>

                <div class="col">
                    <div class="card mb-4">
                        <div class="card-header">
                            <i class="fas fa-table mr-1"></i>
                            @plantName tickets history:
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">

                                <MudTable Items="@_ticketService.Tickets" Hover="true" SortLabel="Sort By" FixedHeader="true" Height="400px">
                                    <HeaderContent>
                                        <MudTh><MudTableSortLabel SortBy="new Func<Tickets, object>(x=>x.TicketId)" InitialDirection="SortDirection.Descending">Id</MudTableSortLabel></MudTh>
                                        <MudTh><MudTableSortLabel SortBy="new Func<Tickets, object>(x=>x.CreatedDate)">Date</MudTableSortLabel></MudTh>
                                        <MudTh>Reason</MudTh>
                                        <MudTh><MudTableSortLabel SortBy="new Func<Tickets, object>(x=>dictDevices[x.DeviceId])">Dev Code</MudTableSortLabel></MudTh>
                                        <MudTh>Status</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Id">@context.TicketId</MudTd>
                                        <MudTd DataLabel="Date">@context.CreatedDate.ToShortDateString()</MudTd>
                                        <MudTd DataLabel="Reason">@context.Reason</MudTd>
                                        <MudTd DataLabel="Code">
                                            @if (dictDevices.ContainsKey(context.DeviceId))
                                                @dictDevices[context.DeviceId]
                                        </MudTd>                                        
                                        <MudTd DataLabel="Status">
                                            @if (context.TicketStatusId == _ticketService.TicketStatuses.Max(x => x.TicketStatusId) - 2)
                                            {
                                                <button class="btn btn-danger" @onclick="@(() => UpdateTicket(context,true))">
                                                    @context.TicketStatus
                                                </button>
                                            }
                                            else
                                            {
                                                @if (context.TicketStatusId == 1)
                                                {
                                                    <button class="btn btn-primary btn-primary-extended" @onclick="@(() => UpdateTicket(context,true))">
                                                        Abort
                                                    </button>
                                                }
                                                else
                                                {
                                                    @context.TicketStatus
                                                }
                                            }

                                        </MudTd>
                                    </RowTemplate>
                                    <PagerContent>
                                        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                                    </PagerContent>
                                </MudTable>

                                <!--
    <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
        <thead>
            <tr>
                <th>Id</th>
                <th>Date</th>
                <th>Reason</th>
                <th>Dev Code</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticket in _ticketService.Tickets)
            {
                <tr>
                    <td>@ticket.TicketId</td>
                    <td>@ticket.CreatedDate.ToShortDateString()</td>
                    <td>@ticket.Reason</td>
                    <td>
                        @if (dictDevices.ContainsKey(ticket.DeviceId))
                            @dictDevices[ticket.DeviceId]
                    </td>
                    <td>
                        @if (ticket.TicketStatusId == _ticketService.TicketStatuses.Max(x => x.TicketStatusId) - 2)
                        {
                            <button class="btn btn-danger" @onclick="@(() => UpdateTicket(ticket,true))">
                                @ticket.TicketStatus
                            </button>
                        }
                        else
                        {
                            @if (ticket.TicketStatusId == 1)
                            {
                                <button class="btn btn-primary btn-primary-extended" @onclick="@(() => UpdateTicket(ticket,true))">
                                    Abort
                                </button>
                            }
                            else
                            {
                                @ticket.TicketStatus
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    -->


                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <footer class="py-4 bg-light mt-auto">
            <div class="container-fluid">
                <div class="d-flex align-items-center justify-content-between small">
                    <div class="text-muted">Sync: online/offline</div>
                </div>
            </div>
        </footer>

    </Authorized>
    <Authorizing>
        <h1>Loading ...</h1>
    </Authorizing>
</AuthorizeView>


<!-- Team -->
<AuthorizeView Roles="Team">
    <Authorized Context="TicketsForTeam">
        <div class="container-fluid container-height">

            <AddTicketComponent OnRefreshParent="AddTicketRefresh"></AddTicketComponent>

<!--
        <FilterTicketsByClient OnRefreshParent="Refresh"></FilterTicketsByClient>

        <FilterTicketsByDevice OnRefreshParent="Refresh"></FilterTicketsByDevice>

        <FilterTicketsByDate OnRefreshParent="Refresh"></FilterTicketsByDate>
-->

            <div class="col-sm-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <i class="fas fa-table mr-1"></i>
                        Tickets history:
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">

                            <MudTable Items="@_ticketService.Tickets" Hover="true" SortLabel="Sort By" FixedHeader="true" Height="400px" Filter="new Func<Tickets,bool>(MyFilterFunc)">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">Tickets search by: [Id] [Client Name] [Plant Name] [Dev Code]</MudText>
                                    <MudSpacer />
                                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                </ToolBarContent>

                                <HeaderContent>
                                    <MudTh>Edit</MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Tickets, object>(x=>x.TicketId)" InitialDirection="SortDirection.Descending">Id</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Tickets, object>(x=>x.CreatedDate)">Date</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Tickets, object>(x=>dictClients[x.ClientId])">Client Name</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Tickets, object>(x=>dictDeviceToPlantName[x.DeviceId])">Plant Name</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Tickets, object>(x=>dictDevices[x.DeviceId])">Dev Code</MudTableSortLabel></MudTh>
                                    <MudTh>Reason</MudTh>
                                    <MudTh>Status</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Edit">
                                        <a href="ticketaddedit/@context.TicketId">
                                            <MudIcon Icon="@Icons.Filled.Edit" Color="Color.Primary" Title="Edit" />
                                        </a>
                                    </MudTd>
                                    <MudTd DataLabel="Id">@context.TicketId</MudTd>
                                    <MudTd DataLabel="Date">@context.CreatedDate.ToShortDateString()</MudTd>
                                    <MudTd DataLabel="Client Name">
                                        @if (dictClients.ContainsKey(context.ClientId))
                                            @dictClients[context.ClientId]
                                    </MudTd>
                                    <MudTd DataLabel="Plant Name">
                                        @if (dictDeviceToPlantName.ContainsKey(context.DeviceId))
                                            @dictDeviceToPlantName[context.DeviceId]
                                    </MudTd>
                                    <MudTd DataLabel="Code">
                                        @if (dictDevices.ContainsKey(context.DeviceId))
                                        {
                                        <a href="/deviceinforeport/@dictDevices[context.DeviceId]" target="_blank">
                                            <p style="color:blue">
                                                <u>
                                                    @dictDevices[context.DeviceId] (@dictDeviceLine[context.DeviceId])
                                                </u>
                                            </p>
                                        </a>
                                        //@dictDevices[context.DeviceId]
                                        }
                                    </MudTd>
                                    <MudTd DataLabel="Reason">@context.Reason</MudTd>
                                    <MudTd DataLabel="Status">
                                        @if (context.TicketStatusId >= _ticketService.TicketStatuses.Max(x => x.TicketStatusId) - 1)
                                        {
                                            @context.TicketStatus
                                        }
                                        else
                                        {
                                            btnStatus = "btn btn-primary";

                                            @if (context.TicketStatusId == (int)TicketStatusMaster.InProgress)
                                            {
                                                btnStatus = "btn btn-success";
                                            }

                                            @if (context.TicketStatusId == (int)TicketStatusMaster.Complete)
                                            {
                                                btnStatus = "btn btn-warning";
                                            }

                                            @if (context.TicketStatusId == (int)TicketStatusMaster.Approve)
                                            {
                                                btnStatus = "btn btn-danger";
                                            }

                                            <button class=@btnStatus @onclick="@(() => UpdateTicket(context,true))">
                                                @context.TicketStatus
                                            </button>
                                        }
                                    </MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                                </PagerContent>
                            </MudTable>


                            <!--


                                            <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                                                <thead>
                                                    <tr>
                                                        <th>Edit</th>
                                                        <th>Id</th>
                                                        <th>Date</th>
                                                        <th>Client Name</th>
                                                        <th>Plant Name</th>
                                                        <th>Dev Code</th>
                                                        <th>Reason</th>
                                                        <th>Status</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var ticket in _ticketService.Tickets)
                                                    {
                                                        <tr>
                                                            <td>
                                                                <a href="ticketaddedit/@ticket.TicketId">
                                                                    <span class="oi oi-pencil" style="color:blue;"></span>
                                                                    <img src="../images/iEdit.png" />
                                                                </a>
                                                            </td>
                                                            <td>@ticket.TicketId</td>
                                                            <td>@ticket.CreatedDate.ToShortDateString()</td>
                                                            <td>
                                                                @if (dictClients.ContainsKey(ticket.ClientId))
                                                                    @dictClients[ticket.ClientId]
                                                            </td>
                                                            <td>
                                                                @if (dictDeviceToPlantName.ContainsKey(ticket.DeviceId))
                                                                {
                                                                    @dictDeviceToPlantName[ticket.DeviceId]
                                                                }
                                                            </td>
                                                            <td>
                                                                @if (dictDevices.ContainsKey(ticket.DeviceId))
                                                                    @dictDevices[ticket.DeviceId]
                                                            </td>
                                                            <td>@ticket.Reason</td>
                                                            <td>
                                                                @if (ticket.TicketStatusId >= _ticketService.TicketStatuses.Max(x => x.TicketStatusId) - 1)
                                                                {
                                                                    @ticket.TicketStatus
                                                                }
                                                                else
                                                                {
                                                                    btnStatus = "btn btn-primary";

                                                                    @if (ticket.TicketStatusId == (int)TicketStatusMaster.InProgress)
                                                                    {
                                                                        btnStatus = "btn btn-success";
                                                                    }

                                                                    @if (ticket.TicketStatusId == (int)TicketStatusMaster.Complete)
                                                                    {
                                                                        btnStatus = "btn btn-warning";
                                                                    }

                                                                    @if (ticket.TicketStatusId == (int)TicketStatusMaster.Approve)
                                                                    {
                                                                        btnStatus = "btn btn-danger";
                                                                    }

                                                                    <button class=@btnStatus @onclick="@(() => UpdateTicket(ticket,true))">
                                                                        @ticket.TicketStatus
                                                                    </button>
                                                                }
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>


                    -->



                        </div>
                    </div>
                </div>
            </div>

        </div>

        <footer class="py-4 bg-light mt-auto">
            <div class="container-fluid">
                <div class="d-flex align-items-center justify-content-between small">
                    <div class="text-muted">Sync: online/offline</div>
                </div>
            </div>
        </footer>

    </Authorized>
    <Authorizing>
        <h1>Loading ...</h1>
    </Authorizing>
</AuthorizeView>


<!-- Admin -->
<AuthorizeView Roles="Admin">
    <Authorized Context="TicketsForAdmin">
        <div class="container-fluid container-height">


            <div class="col-sm-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <div style="float:left">
                            <i class="fas fa-plus-square mr-1"></i>
                            Application Logs
                        </div>
                    </div>

                    <div class="card-body">
                        <button class="btn btn-primary btn-block" onclick="location.href='logslist/'">Manage</button>
                    </div>
                </div>
            </div>


            <div class="col-sm-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <div style="float:left">
                            <i class="fas fa-plus-square mr-1"></i>
                            Administration Office
                        </div>
                    </div>

                    <div class="card-body">
                        <button class="btn btn-primary btn-block" onclick="location.href='administrationoffice/'">Manage</button>
                    </div>
                </div>
            </div>


            <div class="col-sm-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <div style="float:left">
                            <i class="fas fa-plus-square mr-1"></i>
                            Companies
                        </div>
                    </div>

                    <div class="card-body">
                        <button class="btn btn-primary btn-block" onclick="location.href='companylist/'">Manage</button>
                    </div>
                </div>
            </div>

            <div class="col-sm-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <div style="float:left">
                            <i class="fas fa-plus-square mr-1"></i>
                            Plants
                        </div>
                    </div>

                    <div class="card-body">
                        <button class="btn btn-primary btn-block" onclick="location.href='plantlist/'">Manage</button>
                    </div>
                </div>
            </div>

            <div class="col-sm-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <div style="float:left">
                            <i class="fas fa-plus-square mr-1"></i>
                            Contractors
                        </div>
                    </div>

                    <div class="card-body">
                        <button class="btn btn-primary btn-block" onclick="location.href='contractorslist/'">Manage</button>
                    </div>
                </div>
            </div>

            <div class="col-sm-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <div style="float:left">
                            <i class="fas fa-plus-square mr-1"></i>
                            Devices
                        </div>
                    </div>

                    <div class="card-body">
                        <button class="btn btn-primary btn-block" onclick="location.href='devicelist/'">Manage</button>
                    </div>
                </div>
            </div>

            <div class="col-sm-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <div style="float:left">
                            <i class="fas fa-plus-square mr-1"></i>
                            Users
                        </div>
                    </div>

                    <div class="card-body">
                        <button class="btn btn-primary btn-block" onclick="location.href='userlist/'">Manage</button>
                    </div>
                </div>
            </div>


            <AddTicketComponent OnRefreshParent="AddTicketRefresh"></AddTicketComponent>

            <div class="col-sm-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <i class="fas fa-table mr-1"></i>
                        Tickets history:
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">

                            <MudTable Items="@_ticketService.Tickets" Hover="true" SortLabel="Sort By" FixedHeader="true" Height="400px" Filter="new Func<Tickets,bool>(MyFilterFunc)">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">Tickets search by: [Id] [Client Name] [Plant Name] [Dev Code]</MudText>
                                    <MudSpacer />
                                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                </ToolBarContent>

                                <HeaderContent>
                                    <MudTh>Edit</MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Tickets, object>(x=>x.TicketId)" InitialDirection="SortDirection.Descending">Id</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Tickets, object>(x=>x.CreatedDate)">Date</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Tickets, object>(x=>dictClients[x.ClientId])">Client Name</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Tickets, object>(x=>dictDeviceToPlantName[x.DeviceId])">Plant Name</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Tickets, object>(x=>dictDevices[x.DeviceId])">Dev Code</MudTableSortLabel></MudTh>
                                    <MudTh>Reason</MudTh>
                                    <MudTh>Status</MudTh>
                                    <MudTh>Delete</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Edit">
                                        <a href="ticketaddedit/@context.TicketId">
                                            <MudIcon Icon="@Icons.Filled.Edit" Color="Color.Primary" Title="Edit" />
                                        </a>
                                    </MudTd>
                                    <MudTd DataLabel="Id">@context.TicketId</MudTd>
                                    <MudTd DataLabel="Date">@context.CreatedDate.ToShortDateString()</MudTd>
                                    <MudTd DataLabel="Client Name">
                                        @if (dictClients.ContainsKey(context.ClientId))
                                            @dictClients[context.ClientId]
                                    </MudTd>
                                    <MudTd DataLabel="Plant Name">
                                        @if (dictDeviceToPlantName.ContainsKey(context.DeviceId))
                                            @dictDeviceToPlantName[context.DeviceId]
                                    </MudTd>
                                    <MudTd DataLabel="Code">
                                        @if (dictDevices.ContainsKey(context.DeviceId))
                                            @dictDevices[context.DeviceId]
                                    </MudTd>
                                    <MudTd DataLabel="Reason">@context.Reason</MudTd>
                                    <MudTd DataLabel="Status">
                                        @if (context.TicketStatusId > _ticketService.TicketStatuses.Max(x => x.TicketStatusId))
                                        {
                                            @context.TicketStatus
                                        }
                                        else
                                        {
                                            btnStatus = "btn btn-primary";

                                            @if (context.TicketStatusId == (int)TicketStatusMaster.InProgress)
                                            {
                                                btnStatus = "btn btn-success";
                                            }

                                            @if (context.TicketStatusId == (int)TicketStatusMaster.Complete)
                                            {
                                                btnStatus = "btn btn-warning";
                                            }

                                            @if (context.TicketStatusId == (int)TicketStatusMaster.Approve)
                                            {
                                                btnStatus = "btn btn-danger";
                                            }

                                            <button class=@btnStatus @onclick="@(() => UpdateTicket(context,true))">
                                                @context.TicketStatus
                                            </button>
                                        }
                                    </MudTd>
                                    <MudTd DataLabel="Delete">
                                        <MudButton @onclick="@(() => DeleteTicket(context))" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>
                                    </MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                                </PagerContent>
                            </MudTable>


                            <!--

                                                <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                                                    <thead>
                                                        <tr>
                                                            <th>Edit</th>
                                                            <th>Id</th>
                                                            <th>Date</th>
                                                            <th>Client Name</th>
                                                            <th>Plant Name</th>
                                                            <th>Dev Code</th>
                                                            <th>Reason</th>
                                                            <th>Status</th>
                                                            <th>Delete</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var ticket in _ticketService.Tickets)
                                                        {
                                                            <tr>
                                                                <td>
                                                                    <a href="ticketaddedit/@ticket.TicketId">
                                                                        <span class="oi oi-pencil" style="color:blue;"></span>
                                                                        <img src="../images/iEdit.png" />
                                                                    </a>
                                                                </td>
                                                                <td>@ticket.TicketId</td>
                                                                <td>@ticket.CreatedDate.ToShortDateString()</td>
                                                                <td>
                                                                    @if (dictClients.ContainsKey(ticket.ClientId))
                                                                        @dictClients[ticket.ClientId]
                                                                </td>
                                                                <td>
                                                                    @if (dictDeviceToPlantName.ContainsKey(ticket.DeviceId))
                                                                    {
                                                                        @dictDeviceToPlantName[ticket.DeviceId]
                                                                    }
                                                                </td>
                                                                <td>
                                                                    @if (dictDevices.ContainsKey(ticket.DeviceId))
                                                                        @dictDevices[ticket.DeviceId]
                                                                </td>
                                                                <td>@ticket.Reason</td>
                                                                <td>
                                                                    @if (ticket.TicketStatusId > _ticketService.TicketStatuses.Max(x => x.TicketStatusId))
                                                                    {
                                                                        @ticket.TicketStatus
                                                                    }
                                                                    else
                                                                    {
                                                                        btnStatus = "btn btn-primary";

                                                                        @if (ticket.TicketStatusId == (int)TicketStatusMaster.InProgress)
                                                                        {
                                                                            btnStatus = "btn btn-success";
                                                                        }

                                                                        @if (ticket.TicketStatusId == (int)TicketStatusMaster.Complete)
                                                                        {
                                                                            btnStatus = "btn btn-warning";
                                                                        }

                                                                        @if (ticket.TicketStatusId == (int)TicketStatusMaster.Approve)
                                                                        {
                                                                            btnStatus = "btn btn-danger";
                                                                        }

                                                                        <button class=@btnStatus @onclick="@(() => UpdateTicket(ticket,true))">
                                                                            @ticket.TicketStatus
                                                                        </button>
                                                                    }
                                                                </td>
                                                                <td>
                                                                    <MudButton @onclick="@(() => DeleteTicket(ticket))" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>

                    -->



                        </div>
                    </div>
                </div>
            </div>

        </div>

        <footer class="py-4 bg-light mt-auto">
            <div class="container-fluid">
                <div class="d-flex align-items-center justify-content-between small">
                    <div class="text-muted">Sync: online/offline</div>
                </div>
            </div>
        </footer>
    </Authorized>
    <Authorizing>
        <h1>Loading ...</h1>
    </Authorizing>
</AuthorizeView>


@code {
    /// <summary>
    /// name of company
    /// </summary>
    //private int PlantId = 0;
    private string plantName;

    private string btnStatus = "btn btn-primary btn-primary-extended";
    //private int companyTickets;

    public UserInfo CurrentUserInfo;

    //all users
    public List<UserInfo> users;

    //current user
    public List<Plant> plants;
    public List<Device> devices;

    /// <summary>
    /// used by add ticket components
    /// </summary>
    public List<int> userPlants = new List<int>();
    public List<Device> plantDevices = new List<Device>();
    public List<Company> userCompany = new List<Company>();


    public Dictionary<int, string> dictDevices = new Dictionary<int, string>();
    public Dictionary<int, string> dictClients = new Dictionary<int, string>();
    public Dictionary<int, string> dictPlants = new Dictionary<int, string>();
    public Dictionary<int, string> dictDeviceToPlantName = new Dictionary<int, string>();
    public Dictionary<int, int> dictDeviceLine = new Dictionary<int, int>();

    public Dictionary<int, string> dictCompanyName = new Dictionary<int, string>();
    public Dictionary<int, int> dictCompanyTickets = new Dictionary<int, int>();


    public string SelectedDevice = string.Empty;
    public int SelectedClientId = 0;
    public int SelectedPlantId = 0;
    private string SelectedPlant = string.Empty;

    private string searchString1 = "";
    private string searchString2 = "";


    /// <summary>
    /// used to load tickets on page for logged in user's company
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        //load current user tickets
        await _ticketService.Load();

        CurrentUserInfo = await _userinfoService.UserInfo_GetOne(_ticketService.LoggedInUser.UserId);

        if (_ticketService.LoggedInUser.Role.Contains(RoleType.Client))
        {
            //users non serve

            plants = new List<Plant>();
            devices = new List<Device>();

            //current user plants
            foreach (var plantId in CurrentUserInfo.Plants)
            {
                Plant pl = await _plantService.Plant_GetOne(plantId);
                plants.Add(pl);

                var dvc = await _deviceService.GetDevicesForPlant(plantId);
                devices.AddRange(dvc);

                Company cp = await _companyService.Company_GetOne(pl.IdCompany);
                userCompany.Add(cp);
            }
        }
        else
        {
            //lista utenti ruolo client
            users = await _userinfoService.GetUserList(3);
            dictClients = users.Distinct().ToDictionary(x => x.Id, x => x.UserName);

            plants = await _plantService.GetPlantList();

            devices = await _deviceService.GetDeviceList();
        }

        dictPlants = plants.Distinct().ToDictionary(x => x.Id, x => x.Name);
        dictDevices = devices.Distinct().ToDictionary(x => x.Id, x => x.Code);
        dictDeviceLine = devices.Distinct().ToDictionary(x => x.Id, x => x.NumLinea);

        foreach (var cmp in userCompany)
        {
            if (!dictCompanyName.ContainsKey(cmp.Id)) dictCompanyName[cmp.Id] = cmp.Name;
            if (!dictCompanyTickets.ContainsKey(cmp.Id)) dictCompanyTickets[cmp.Id] = cmp.TicketAmount;
        }
        //dictCompanyName = userCompany.Distinct().ToDictionary(x => x.Id, x => x.Name);
        //dictCompanyTickets = userCompany.Distinct().ToDictionary(x => x.Id, x => x.TicketAmount);


        foreach (var dv in devices)
        {
            if (true)/// !dictDeviceToPlantName.ContainsKey(dv.Id))
            {
                if (dictPlants.ContainsKey(dv.PlantId))
                {
                    dictDeviceToPlantName[dv.Id] = dictPlants[dv.PlantId];
                }
            }
        }

        //plantName
        //Plant pl = await _plantService.Plant_GetOne(PlantId);
        //plantName = pl.Name;

        //Company cp = await _companyService.Company_GetOne(pl.IdCompany);
        //companyName = cp.Name;
        //companyTickets = cp.TicketAmount;

        int clientId = _ticketService.LoggedInUser.UserId;

        _ticketService.TickettoInsert.ClientId = clientId;
        _ticketService.TickettoInsert.TeamId = clientId; //to avoid primary key exception
        _ticketService.TickettoInsert.CloserId = clientId; //to avoid primary key exception
    }

    /// <summary>
    /// used to show error message for tickets creation
    /// </summary>
    public string error { get; set; }

    /// <summary>
    /// Add new ticket. takes TickettoInsert as imput which contains tickets data.
    /// </summary>
    /// <returns></returns>
    public async Task AddTicket()
    {
        error = null;
        try
        {
            if (_ticketService.TickettoInsert.ClientId > 0 && _ticketService.TickettoInsert.DeviceId > 0)
            {
                await _ticketService.AddTicket();
                _ticketService.TickettoInsert = new Tickets();

                error = "Ticket added successfully.";
                await OnInitializedAsync();
            }
            else
            {
                if (_ticketService.TickettoInsert.ClientId == -1)
                {
                    error = "Error, Select a client";
                }
                else
                {
                    error = "Error, Select a device";
                }
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    public async Task UpdateTicket(Tickets ticket, bool updateStatus)
    {
        error = null;

        try
        {
            //ticket current state
            Tickets cTicket = await _ticketService.GetTicketsById(ticket.TicketId);

            bool advanceStatus = true;
            if (updateStatus)
            {
                if (cTicket.TicketStatusId == (int)TicketStatusMaster.ToDo)
                {
                    cTicket.OpenDate = DateTime.Now;
                    cTicket.TeamId = _ticketService.LoggedInUser.UserId;
                    if (_ticketService.LoggedInUser.Role.Contains(RoleType.Client))
                    {
                        cTicket.TicketStatusId = (int)TicketStatusMaster.Aborted;
                        cTicket.TicketStatus = _ticketService.TicketStatuses.First(x => x.TicketStatusId == cTicket.TicketStatusId).TicketStatus;
                        cTicket.CloserId = _ticketService.LoggedInUser.UserId;
                        cTicket.CloseDate = DateTime.Now;
                        advanceStatus = false;
                    }
                }

                if (cTicket.TicketStatusId == (int)TicketStatusMaster.Approve)
                {
                    cTicket.CloserId = _ticketService.LoggedInUser.UserId;
                    cTicket.CloseDate = DateTime.Now;
                }

                if (cTicket.TicketStatusId == (int)TicketStatusMaster.Closed)
                {
                    if (!_ticketService.LoggedInUser.Role.Contains(RoleType.Admin))
                    {
                        advanceStatus = false;
                    }
                }

                if (cTicket.TicketStatusId == (int)TicketStatusMaster.Aborted)
                {
                    if (!_ticketService.LoggedInUser.Role.Contains(RoleType.Admin))
                    {
                        advanceStatus = false;
                    }
                }

                if (advanceStatus)
                {
                    if (cTicket.TicketStatusId != (int)TicketStatusMaster.Aborted)
                    {
                        cTicket.TicketStatusId = ticket.TicketStatusId + 1;
                    }
                    else
                    {
                        //restart loop
                        cTicket.TicketStatusId = (int)TicketStatusMaster.ToDo;
                    }

                    cTicket.TicketStatus = _ticketService.TicketStatuses.First(x => x.TicketStatusId == cTicket.TicketStatusId).TicketStatus;
                }
            }

            //aggiorna ticket
            //ticket = cTicket;

            await _ticketService.UpdateTicket(cTicket, updateStatus);

            error = "Ticket updated successfully.";

            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    public async Task DeleteTicket(Tickets tk)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete ticket id={ tk.TicketId }? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = _dialogService.Show<ItvModalDialog>("Delete", parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            error = null;
            try
            {
                await _ticketService.DeleteTicket(tk);

                error = "Ticket deleted successfully.";

                await OnInitializedAsync();
            }
            catch (Exception ex)
            {
                error = ex.Message;
            }
        }
    }

    public async Task BuildUserPlants(ChangeEventArgs e)
    {
        userPlants.Clear();
        plantDevices.Clear();

        string usrid = e.Value.ToString();
        int userid = Convert.ToInt32(usrid);

        UserInfo selUser = await _userinfoService.UserInfo_GetOne(userid);

        //copy list
        foreach (var elm in selUser.Plants)
        {
            userPlants.Add(elm);
        }

        _ticketService.TickettoInsert.DeviceId = -1;

        _ticketService.TickettoInsert.ClientId = userid;
        _ticketService.TickettoInsert.TeamId = userid;
        _ticketService.TickettoInsert.CloserId = userid;
    }

    public async Task BuildPlantDevices(ChangeEventArgs e)
    {
        plantDevices.Clear();
        string plid = e.Value.ToString();

        int plantid = Convert.ToInt32(plid);

        plantDevices = await _deviceService.GetDevicesForPlant(plantid);
    }

    protected async Task AddTicketRefresh()
    {
        int k = 0;
        await AddTicket();

        StateHasChanged();
    }

    protected async Task UpdateDeleteTicketRefresh()
    {
        await OnInitializedAsync();

        StateHasChanged();
    }

    protected async Task Refresh()
    {
        StateHasChanged();
    }


    //metodi per ricerca tickets
    private bool MyFilterFunc(Tickets element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Tickets element, string searchString)
    {
        string clientName = "null";
        string deviceName = "null";
        string plantName = "null";

        if (dictClients.ContainsKey(element.ClientId)) clientName = dictClients[element.ClientId];
        if (dictDevices.ContainsKey(element.DeviceId)) deviceName = dictDevices[element.DeviceId];
        if (dictDeviceToPlantName.ContainsKey(element.DeviceId)) plantName = dictDeviceToPlantName[element.DeviceId];

        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.TicketId.ToString().Equals(searchString))
            return true;

        if (clientName.Equals(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (plantName.Equals(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        //!!! device name ha spazi...
        if (deviceName.Trim().Equals(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        //if (deviceName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;

        //if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
        //    return true;

        return false;
    }
}
