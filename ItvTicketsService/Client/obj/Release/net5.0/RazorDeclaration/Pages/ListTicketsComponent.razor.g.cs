// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ItvTicketsService.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\_Imports.razor"
using ItvTicketsService.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\_Imports.razor"
using ItvTicketsService.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\_Imports.razor"
using ItvTicketsService.Shared.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\_Imports.razor"
using ItvTicketsService.Client.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
    public partial class ListTicketsComponent : Index
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 113 "C:\Users\sachi\Source\Repos\itvticketsservice\ItvTicketsService\Client\Pages\ListTicketsComponent.razor"
       
    [Parameter]
    public int UserType { get; set; }

    [Parameter]
    public EventCallback<bool> OnRefreshParentUpdDel { get; set; }

    [Parameter]
    public List<Tickets> tickets { get; set; }

    public string btnStatus = "btn btn-primary btn-primary-extended";

    async Task OnMyRefresh()
    {
        //per refresh
        await OnRefreshParentUpdDel.InvokeAsync(true);
    }

    /*
    async Task UpdateTicket(Tickets ticket, bool updateStatus)
    {
        error = null;

        try
        {
            //ticket current state
            Tickets cTicket = await _ticketService.GetTicketsById(ticket.TicketId);

            bool advanceStatus = true;
            if (updateStatus)
            {
                if (cTicket.TicketStatusId == (int)TicketStatusMaster.ToDo)
                {
                    cTicket.OpenDate = DateTime.Now;
                    cTicket.TeamId = _ticketService.LoggedInUser.UserId;
                    if (_ticketService.LoggedInUser.Role.Contains(RoleType.Client))
                    {
                        cTicket.TicketStatusId = (int)TicketStatusMaster.Aborted;
                        cTicket.TicketStatus = _ticketService.TicketStatuses.First(x => x.TicketStatusId == cTicket.TicketStatusId).TicketStatus;
                        cTicket.CloserId = _ticketService.LoggedInUser.UserId;
                        cTicket.CloseDate = DateTime.Now;
                        advanceStatus = false;
                    }
                }

                if (cTicket.TicketStatusId == (int)TicketStatusMaster.Approve)
                {
                    cTicket.CloserId = _ticketService.LoggedInUser.UserId;
                    cTicket.CloseDate = DateTime.Now;
                }

                if (cTicket.TicketStatusId == (int)TicketStatusMaster.Closed)
                {
                    if (!_ticketService.LoggedInUser.Role.Contains(RoleType.Admin))
                    {
                        advanceStatus = false;
                    }
                }

                if (cTicket.TicketStatusId == (int)TicketStatusMaster.Aborted)
                {
                    if (!_ticketService.LoggedInUser.Role.Contains(RoleType.Admin))
                    {
                        advanceStatus = false;
                    }
                }

                if (advanceStatus)
                {
                    if (cTicket.TicketStatusId != (int)TicketStatusMaster.Aborted)
                    {
                        cTicket.TicketStatusId = ticket.TicketStatusId + 1;
                    }
                    else
                    {
                        //restart loop
                        cTicket.TicketStatusId = (int)TicketStatusMaster.ToDo;
                    }

                    cTicket.TicketStatus = _ticketService.TicketStatuses.First(x => x.TicketStatusId == cTicket.TicketStatusId).TicketStatus;
                }
            }

            //aggiorna ticket
            //ticket = cTicket;

            await _ticketService.UpdateTicket(cTicket, updateStatus);

            error = "Ticket updated successfully.";
            await OnInitializedAsync();
            await OnRefreshParent.InvokeAsync(true);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }


    async Task DeleteTicket(Tickets tk)
    {
        error = null;

        try
        {
            await _ticketService.DeleteTicket(tk);

            error = "Ticket deleted successfully.";
            await OnInitializedAsync();
            await OnRefreshParent.InvokeAsync(true);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
    */

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITicketService _ticketService { get; set; }
    }
}
#pragma warning restore 1591
